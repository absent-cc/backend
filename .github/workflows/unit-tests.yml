# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unit Tests

on:
  discussion:
    types: [opened, edited, answered]
  push:
    branches: [ main, prod ]
  pull_request:
    branches: [ main, prod ]
    # Beep

jobs:

  testing:
    
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        # python-version: ["3.8", "3.9", "3.10"]
        python-versions: ["3.8"]

    # Service containers to run testing on
    services:
      postgres:
        image: postgres # Use postgres Docker hub image

        # Provide default password to postgres
        env:
          POSTGRES_USER: absent
          POSTGRES_DB: absent
          POSTGRES_PASSWORD: password
         
         # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Setup ssh keys
      run: |
        python -m tests.setup_test_system

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set up NOCASE collation for p0stgres
      run: |
        psql -h localhost -U absent -d absent -c 'CREATE COLLATION nocase (provider = icu, locale = 'und-u-ks-level2', deterministic = false);'
      env:
         PGPASSWORD: password 
      
    - name: Set up postgres
      env: 
        TESTING: True
      run: |
        alembic -c tests/test_alembic.ini revision --autogenerate -m 'initial'
        alembic -c tests/test_alembic.ini upgrade head
    - name: Test with pytest
      run: |
        pytest